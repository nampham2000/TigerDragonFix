{"version":3,"sources":["file:///C:/Users/Admin/Downloads/Telegram%20Desktop/Fix4%204/Fix4/assets/Scripts/NetworkConnect.ts"],"names":["_decorator","Component","instantiate","Label","Node","Prefab","Sprite","SpriteFrame","tween","Vec3","Animation","Colyseus","AudioController","Chip","ccclass","property","NetworkConnect","type","String","Number","Boolean","parentNodeChip","client","room","gameState","resultDragon","resultTiger","TotalUser","UserBet","NotmeBet","result","winner","currentHost","balanceUser","TotalBalanceUser","betDragon","betTiger","betTie","totaluserBetDragon","totaluserBetTiger","totaluserBetTie","dragonReuslt","tigerResult","namePlayer","winnerPLayer","start","Client","useSSL","hostname","port","connect","auth","token","localStorage","getItem","joinOrCreate","users","console","log","sessionId","onMessage","message","TimerDown","string","onAudio","PayoutAnim","winAnimPlus","playerId","state","players","get","usercancel","displayName","i","ListLabel","length","node","removeAllChildren","dragonCard","value","tigerCard","betAmount","playerID","betType","createSpriteNode","balance","setInterval","send","onStateChange","roundState","totalBetDragon","totalBetTiger","totalBetTie","totalUserBetDragon","totalUserBetTiger","totalUserBetTie","currentHostId","values","updatePlayerList","onLeave","code","e","error","playerList","displayIndex","numElements","ListL","forEach","active","nameUser","prefab","prefabs","spriteNode","scale","v3","PosTarget","DragonNode","ChipParent","TigerNode","TieNode","addChild","inverseTransformPoint","worldPosition","to","position","winnerList","winnerNode","findWinnerNode","PayUser","createSpriteNodePay","x","y","PayUserSprite","winid","price","CoinWinAni","toString","getComponent","play","winnerName","posX","posY","spriteFrames","spriteComponent","addComponent","spriteFrame","delay","call"],"mappings":"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","sourcesContent":["import {\n  _decorator,\n  Component,\n  instantiate,\n  Label,\n  Node,\n  Prefab,\n  Sprite,\n  SpriteFrame,\n  tween,\n  Vec3,\n  Animation,\n} from \"cc\";\n\nconst { ccclass, property } = _decorator;\nimport Colyseus from \"db://colyseus-sdk/colyseus.js\";\nimport { AudioController } from \"./AudioController\";\nimport { Chip } from \"./Chip\";\n@ccclass(\"NetworkConnect\")\nexport class NetworkConnect extends Component {\n  @property({ type: String })\n  hostname = \"localhost\";\n\n  @property({ type: Number })\n  port = 80;\n\n  @property({ type: Boolean })\n  useSSL = true;\n\n  @property({ type: Node })\n  private ListL: Node[] = [];\n\n  @property({ type: Label })\n  public ListLabel: Label[] = [];\n\n  @property(Label)\n  private TimerDown: Label;\n\n  @property(Label)\n  private CoinWinAni: Label;\n\n  @property({\n    type: Chip,\n  })\n  private chipNode: Chip;\n\n  @property({\n    type: Prefab,\n  })\n  private prfab: Prefab;\n\n  @property({\n    type: Node,\n  })\n  private DragonNode: Node;\n\n  @property({\n    type: Node,\n  })\n  private TigerNode: Node;\n\n  @property({\n    type: Node,\n  })\n  private TieNode: Node;\n\n  @property({\n    type: Node,\n  })\n  private PayUser: Node;\n\n  @property({ type: Node })\n  private ChipParent: Node[] = [];\n\n  @property({ type: Prefab })\n  public prefabs: Prefab[] = [];\n\n  parentNodeChip;\n\n  client!: Colyseus.Client;\n  room!: Colyseus.Room;\n  gameState;\n  resultDragon: number = 0;\n  resultTiger: number = 0;\n  TotalUser;\n  UserBet;\n  NotmeBet;\n  result;\n  winner;\n  currentHost: any;\n  balanceUser: any;\n  TotalBalanceUser: any;\n  betDragon: any;\n  betTiger: any;\n  betTie: any;\n  totaluserBetDragon: any;\n  totaluserBetTiger: any;\n  totaluserBetTie: any;\n  dragonReuslt;\n  tigerResult;\n  namePlayer\n  winnerPLayer;\n  @property({\n    type: AudioController,\n  })\n  private AudioController: AudioController;\n\n  @property({\n    type: SpriteFrame,\n  })\n  private PayUserSprite: SpriteFrame[] = [];\n\n  async start() {\n    this.client = new Colyseus.Client(\n      `${this.useSSL ? \"wss\" : \"ws\"}://${this.hostname}:${this.port}`\n    );\n\n    this.connect();\n  }\n\n  async connect() {\n    try {\n      this.client.auth.token = localStorage.getItem(\"Token\");\n      this.room = await this.client.joinOrCreate(\"room1\");\n\n      // const rooms = await this.client.getAvailableRooms(\"room1\");\n      // if (rooms.length === 0) {\n      //   this.room = await this.client.create(\"room1\");\n      //   console.log(\"Created new room with sessionId:\", this.room.sessionId);\n      // } else {\n      //   // Nếu có phòng có sẵn, tham gia vào phòng đầu tiên trong danh sách\n      //   this.room = await this.client.crea(rooms[0].roomId);\n      //   console.log(\n      //     \"Joined existing room with sessionId:\",\n      //     this.room.sessionId\n      //   );\n      // }\n      const users = {};\n\n      // Sự kiện được kích hoạt khi một người dùng tham gia vào phòng\n      console.log(\"Joined successfully!\");\n      console.log(\"User's sessionId:\", this.room.sessionId);\n      // this.room.send(\n      //   \"signup\",\n      //   JSON.stringify({\n      //     email: \"nampham78934@gmail.com\",\n      //     password: \"nam123455664\",\n      //   })\n      // );\n\n      this.room.onMessage(\"timer\", (message) => {\n        this.TimerDown.string = message;\n        if (message < 30 && message > 0) {\n          this.AudioController.onAudio(3);\n        }\n        if (message === 0) {\n          this.AudioController.onAudio(4);\n        }\n      });\n\n      this.room.onMessage(\"winnerList\", (message) => {\n        this.PayoutAnim(message);\n        this.winAnimPlus(message);\n      });\n\n      this.room.onMessage(\"userCancel\", (message) => {\n        console.log(\"mesage iddddddddddddd\",message.playerId);\n        \n        console.log(this.room.state.players.get(message.playerId));\n        \n        const usercancel=this.room.state.players.get(message.playerId).displayName\n        for (let i = 0; i < this.ListLabel.length; i++) {\n          if (usercancel === this.ListLabel[i].string) {\n              this.ListLabel[i].node.removeAllChildren();\n            }\n        }\n          \n      });\n\n      this.room.onMessage(\"result\", (message) => {\n        // console.log(message.result);\n        console.log(\"rong\", message.dragonCard.value);\n        console.log(\"ho\", message.tigerCard.value);\n        this.result = message.result;\n      });\n\n      this.room.onMessage(\"userBet\", (message) => {\n        console.log(message.betAmount);\n        \n        this.namePlayer=this.room.state.players.get(\n          message.playerID\n        );\n        if (message.playerID != this.room.sessionId) {\n          this.UserBet = message.betType;\n          console.log(\"messsssssss\",message);\n          \n          this.createSpriteNode(this.namePlayer.displayName,message.betAmount);\n        } else {\n          // console.log(\"false\");\n        }\n      });\n\n      this.room.onMessage(\"balance\", (message) => {\n        this.balanceUser = message.balance;\n        console.log(message);\n      });\n      setInterval(() => {\n        this.room.send(\"getBalance\");\n      }, 500);\n\n      this.room.onStateChange((state) => {\n        console.log(\"Room state changed:\", state);\n        console.log(\"onStateChange: \", state);\n        console.log(state.roundState);\n\n        this.betDragon = state.totalBetDragon;\n        this.betTiger = state.totalBetTiger;\n        this.betTie = state.totalBetTie;\n        this.totaluserBetDragon = state.totalUserBetDragon;\n        this.totaluserBetTiger = state.totalUserBetTiger;\n        this.totaluserBetTie = state.totalUserBetTie;\n\n        // console.log(this.room.state);\n        this.currentHost = state.currentHostId;\n        console.log(this.currentHost);\n\n        const players = [...state.players.values()];\n\n        this.updatePlayerList(players);\n        // console.log(\"PlayerStatus\", players[0].isHost);\n        this.TotalUser = players.length;\n        this.gameState = state.roundState;\n      });\n\n      this.room.onLeave((code) => {\n        console.log(\"Left room with code:\", code);\n      });\n    } catch (e) {\n      console.error(\"Error:\", e);\n    }\n  }\n\n  updatePlayerList(playerList: any[]) {\n    let displayIndex = 0;\n    const numElements = playerList.length;\n    this.ListL.forEach((node) => {\n      node.active = false;\n    });\n    for (let i = 0; i < numElements && displayIndex < this.ListL.length; i++) {\n      if (\n        playerList[i].sessionId !== this.room.sessionId &&\n        playerList[i].sessionId !== this.currentHost\n      ) {\n        const nameUser = this.room.state.players.get(playerList[i].sessionId);\n        this.ListLabel[displayIndex].string = nameUser.displayName;\n        this.ListL[displayIndex].active = true;\n        displayIndex++;\n        this.AudioController.onAudio(9);\n      }\n    }\n    for (let i = displayIndex; i < this.ListL.length; i++) {\n      this.ListL[i].active = false;\n    }\n  }\n\n  private createSpriteNode(sessionId: string,betAmount:number) {\n    if (betAmount < 1 || betAmount > 6) {\n      console.error(\"Invalid betAmount:\", betAmount);\n      return;\n  }\n\n  // Lấy prefab tương ứng với betAmount\n  const prefab = this.prefabs[betAmount - 1];\n    const spriteNode = instantiate(prefab);\n    spriteNode.scale = new Vec3(0.5, 0.5);\n    let v3 = new Vec3();\n    let PosTarget;\n    \n    // Kiểm tra nếu sessionId trùng khớp với label nào đó\n    for (let i = 0; i < this.ListLabel.length; i++) {\n      if (sessionId === this.ListLabel[i].string) {\n        // Thêm node mới làm con của node có label tương ứng\n        if (this.UserBet === \"Dragon\") {\n          PosTarget = this.DragonNode;\n          this.parentNodeChip=this.ChipParent[0]\n        } else if (this.UserBet === \"Tiger\") {\n          PosTarget = this.TigerNode;\n          this.parentNodeChip=this.ChipParent[1]\n        } else {\n          PosTarget = this.TieNode;\n          this.parentNodeChip=this.ChipParent[2]\n        }\n        this.ListLabel[i].node.addChild(spriteNode);\n        this.ListLabel[i].node.inverseTransformPoint(\n          v3,\n          PosTarget.worldPosition\n        );\n        tween(spriteNode)\n          .to(0.3, { position: v3 })\n          .start();\n        break; \n        }\n    }\n  }\n\n  private PayoutAnim(winnerList) {\n    if (winnerList.length > 0) {\n      this.AudioController.onAudio(6);\n    }\n\n    // Lặp qua danh sách người chiến thắng và tạo nút trả tiền cho mỗi người chiến thắng\n    for (let i = 0; i < winnerList.length; i++) {\n    \n      const winner =  this.room.state.players.get(winnerList[i].sessionId).displayName; \n\n      // Tìm node tương ứng với người chiến thắng\n      const winnerNode = this.findWinnerNode(winner);\n\n      if (winnerNode) {\n        let v3 = new Vec3();\n        this.PayUser.inverseTransformPoint(v3, winnerNode.worldPosition);\n        // Tạo nút trả tiền cho người chiến thắng\n        this.createSpriteNodePay(v3.x, v3.y, this.PayUserSprite);\n      }\n    }\n  }\n  private winAnimPlus(winid) {\n    for (let i = 0; i < winid.length; i++) {\n      if (winid[i].sessionId === this.room.sessionId) {\n        console.log(\"Price:\", winid[i].price);\n\n        this.CoinWinAni.string = \"+\" + winid[i].price.toString();\n        this.CoinWinAni.node.active = true;\n        this.CoinWinAni.node.getComponent(Animation).play();\n        break; // Nếu tìm thấy phần tử thỏa mãn, dừng vòng lặp\n      }\n    }\n  }\n\n  // Hàm để tìm node tương ứng với người chiến thắng\n  private findWinnerNode(winnerName) {\n    // Lặp qua danh sách nhãn để tìm node có tên trùng khớp với người chiến thắng\n    for (let i = 0; i < this.ListLabel.length; i++) {\n      if (winnerName === this.ListLabel[i].string) {\n        return this.ListLabel[i].node;\n      }\n    }\n    return null; // Trả về null nếu không tìm thấy node\n  }\n\n  createSpriteNodePay(posX, posY, spriteFrames: SpriteFrame[]) {\n    // Lặp qua từng sprite frame để tạo node tương ứng\n    for (let i = 0; i < spriteFrames.length; i++) {\n      // Tạo một Node mới\n      const spriteNode = new Node(\"SpriteNode\");\n      spriteNode.scale = new Vec3(0.5, 0.5);\n\n      // Thêm một component Sprite vào Node\n      const spriteComponent = spriteNode.addComponent(Sprite);\n\n      // Gán SpriteFrame cho component Sprite dựa trên index\n      spriteComponent.spriteFrame = spriteFrames[i];\n\n      // Thêm Node vào Scene hiện tại (ví dụ: Node cha của tất cả Sprite)\n      this.PayUser.addChild(spriteNode); // Giả sử winner.node là node của người chiến thắng\n\n      // Tween Node đến vị trí mong muốn\n      tween(spriteNode)\n        .delay(i * 0.1) // thiết lập thời gian trễ dựa trên index của node\n        .to(1, { position: new Vec3(posX, posY) })\n        .call(() => {\n          spriteNode.active = false;\n        })\n        .start();\n    }\n  }\n}\n"]}