{"version":3,"sources":["file:///C:/Users/Admin/OneDrive/Desktop/GameNew/assets/Scripts/NetworkConnect.ts"],"names":["_decorator","Component","Label","Node","Colyseus","ccclass","property","NetworkConnect","type","String","Number","Boolean","client","room","gameState","resultDragon","resultTiger","TotalUser","UserBet","NotmeBet","start","Client","useSSL","hostname","port","connect","rooms","getAvailableRooms","console","log","length","create","sessionId","onMessage","message","TimerDown","string","dragonCard","value","tigerCard","playerID","onStateChange","state","roundState","players","values","updatePlayerList","onLeave","code","e","error","playerList","displayIndex","numElements","ListL","forEach","node","active","i","ListLabel"],"mappings":"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","sourcesContent":["import { _decorator, Component, Label, Node, Sprite, tween, Vec3 } from \"cc\";\r\nconst { ccclass, property } = _decorator;\r\nimport Colyseus from \"db://colyseus-sdk/colyseus.js\";\r\n\r\n@ccclass(\"NetworkConnect\")\r\nexport class NetworkConnect extends Component {\r\n  @property({ type: String })\r\n  hostname = \"\";\r\n\r\n  @property({ type: Number })\r\n  port = 80;\r\n\r\n  @property({ type: Boolean })\r\n  useSSL = true;\r\n\r\n  @property({ type: Node })\r\n  private ListL: Node[] = [];\r\n\r\n  @property({ type: Label })\r\n  private ListLabel: Label[] = [];\r\n\r\n  @property(Label)\r\n  private TimerDown: Label;\r\n\r\n  client!: Colyseus.Client;\r\n  room!: Colyseus.Room;\r\n  gameState;\r\n  resultDragon;\r\n  resultTiger;\r\n  TotalUser;\r\n  UserBet;\r\n  NotmeBet;\r\n\r\n  start() {\r\n    this.client = new Colyseus.Client(\r\n      `${this.useSSL ? \"wss\" : \"ws\"}://${this.hostname}:${this.port}`\r\n    );\r\n\r\n    this.connect();\r\n  }\r\n\r\n  async connect() {\r\n    try {\r\n      \r\n      const rooms = await this.client.getAvailableRooms(\"room1\");\r\n      console.log(rooms.length);\r\n\r\n      // if (rooms.length === 0) {\r\n        this.room = await this.client.create(\"room1\");\r\n        console.log(\"Created new room with sessionId:\", this.room.sessionId);\r\n      // } else {\r\n      //   // Nếu có phòng có sẵn, tham gia vào phòng đầu tiên trong danh sách\r\n      //   this.room = await this.client.joinById(rooms[0].roomId);\r\n      //   console.log(\r\n      //     \"Joined existing room with sessionId:\",\r\n      //     this.room.sessionId\r\n      //   );\r\n      // }\r\n\r\n      console.log(\"Joined successfully!\");\r\n      console.log(\"User's sessionId:\", this.room.sessionId);\r\n\r\n      // this.room.onMessage(\"playerList\", (message) => {\r\n      //   console.log(message);\r\n      //   this.updatePlayerList(message);\r\n      // });\r\n\r\n      this.room.onMessage(\"timer\", (message) => {\r\n        this.TimerDown.string = message;\r\n      });\r\n\r\n      this.room.onMessage(\"result\", (message) => {\r\n        this.resultDragon = message.dragonCard.value;\r\n        this.resultTiger = message.tigerCard.value;\r\n      });\r\n\r\n      this.room.onMessage(\"userBet\", (message) => {\r\n        if (message.playerID !== this.room.sessionId) {\r\n          console.log(\"Thang kia bet\");\r\n          this.UserBet = message.playerID;\r\n        } else {\r\n          console.log(\"false\");\r\n        }\r\n      });\r\n\r\n      this.room.onStateChange((state) => {\r\n        console.log(\"Room state changed:\", state);\r\n        console.log(\"onStateChange: \", state);\r\n        console.log(state.roundState);\r\n        \r\n        const players = [...state.players.values()];\r\n        this.updatePlayerList(players);\r\n        console.log(players);\r\n        this.TotalUser=players.length;\r\n\r\n        this.gameState = state.roundState;\r\n      });\r\n\r\n      this.room.onLeave((code) => {\r\n        console.log(\"Left room with code:\", code);\r\n      });\r\n    } catch (e) {\r\n      console.error(\"Error:\", e);\r\n    }\r\n  }\r\n\r\n  updatePlayerList(playerList: any[]) {\r\n    let displayIndex = 0; // Biến đếm số lượng người chơi đã được thêm vào danh sách hiển thị\r\n    const numElements = playerList.length;\r\n\r\n    // Ẩn tất cả các node trong danh sách\r\n    this.ListL.forEach((node) => {\r\n        node.active = false;\r\n    });\r\n    for (let i = 0; i < numElements && displayIndex < this.ListL.length; i++) {\r\n        if (playerList[i].sessionId !== this.room.sessionId) {\r\n            this.ListLabel[displayIndex].string = playerList[i].sessionId;\r\n            this.ListL[displayIndex].active = true;\r\n            displayIndex++;\r\n        }\r\n    }\r\n    for (let i = displayIndex; i < this.ListL.length; i++) {\r\n        this.ListL[i].active = false;\r\n    }\r\n}\r\n\r\n\r\n\r\n  // createSpriteNode(posX, PosY, PosNode: Node) {\r\n  //   // Tạo một Node mới\r\n  //   const spriteNode = new Node(\"SpriteNode\");\r\n  //   spriteNode.scale = new Vec3(0.5, 0.5);\r\n\r\n  //   // Thêm một component Sprite vào Node\r\n  //   const spriteComponent = spriteNode.addComponent(Sprite);\r\n\r\n  //   // Gán SpriteFrame cho component Sprite\r\n  //   spriteComponent.spriteFrame =\r\n  //     this.chipNode.buttonPub.node.getComponent(Sprite).spriteFrame;\r\n  //   // spriteNode.position=new Vec3(this.chipNode.buttonPub.node.position)\r\n  //   // Thêm Node vào Scene hiện tại (ví dụ: Node cha của tất cả Sprite)\r\n  //   PosNode.addChild(spriteNode);\r\n  //   tween(spriteNode)\r\n  //     .to(0.3, { position: new Vec3(posX, PosY) })\r\n  //     .start();\r\n  // }\r\n}\r\n"]}