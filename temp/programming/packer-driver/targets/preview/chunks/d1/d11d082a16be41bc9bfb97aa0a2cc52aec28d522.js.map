{"version":3,"sources":["file:///Users/waostudio/node_modules/whatwg-url/lib/URL-impl.js"],"names":["_cjsLoader","_req","__cjsMetaURL","url","define","exports","require","module","__filename","__dirname","usm","implementation","URLImpl","constructor","constructorArgs","base","parsedBase","undefined","basicURLParse","TypeError","parsedURL","baseURL","_url","href","serializeURL","v","origin","serializeURLOrigin","protocol","scheme","stateOverride","username","cannotHaveAUsernamePasswordPort","setTheUsername","password","setThePassword","host","port","serializeHost","serializeInteger","cannotBeABaseURL","hostname","pathname","path","length","join","search","query","input","substring","hash","fragment","toJSON","_cjsExports","_implementation"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from './url-state-machine';\nlet _cjsExports;\nlet _implementation;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n \"use strict\";\n const usm = require(\"./url-state-machine\");\n\n exports.implementation = class URLImpl {\n   constructor(constructorArgs) {\n     const url = constructorArgs[0];\n     const base = constructorArgs[1];\n\n     let parsedBase = null;\n     if (base !== undefined) {\n       parsedBase = usm.basicURLParse(base);\n       if (parsedBase === \"failure\") {\n         throw new TypeError(\"Invalid base URL\");\n       }\n     }\n\n     const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });\n     if (parsedURL === \"failure\") {\n       throw new TypeError(\"Invalid URL\");\n     }\n\n     this._url = parsedURL;\n\n     // TODO: query stuff\n   }\n\n   get href() {\n     return usm.serializeURL(this._url);\n   }\n\n   set href(v) {\n     const parsedURL = usm.basicURLParse(v);\n     if (parsedURL === \"failure\") {\n       throw new TypeError(\"Invalid URL\");\n     }\n\n     this._url = parsedURL;\n   }\n\n   get origin() {\n     return usm.serializeURLOrigin(this._url);\n   }\n\n   get protocol() {\n     return this._url.scheme + \":\";\n   }\n\n   set protocol(v) {\n     usm.basicURLParse(v + \":\", { url: this._url, stateOverride: \"scheme start\" });\n   }\n\n   get username() {\n     return this._url.username;\n   }\n\n   set username(v) {\n     if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n       return;\n     }\n\n     usm.setTheUsername(this._url, v);\n   }\n\n   get password() {\n     return this._url.password;\n   }\n\n   set password(v) {\n     if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n       return;\n     }\n\n     usm.setThePassword(this._url, v);\n   }\n\n   get host() {\n     const url = this._url;\n\n     if (url.host === null) {\n       return \"\";\n     }\n\n     if (url.port === null) {\n       return usm.serializeHost(url.host);\n     }\n\n     return usm.serializeHost(url.host) + \":\" + usm.serializeInteger(url.port);\n   }\n\n   set host(v) {\n     if (this._url.cannotBeABaseURL) {\n       return;\n     }\n\n     usm.basicURLParse(v, { url: this._url, stateOverride: \"host\" });\n   }\n\n   get hostname() {\n     if (this._url.host === null) {\n       return \"\";\n     }\n\n     return usm.serializeHost(this._url.host);\n   }\n\n   set hostname(v) {\n     if (this._url.cannotBeABaseURL) {\n       return;\n     }\n\n     usm.basicURLParse(v, { url: this._url, stateOverride: \"hostname\" });\n   }\n\n   get port() {\n     if (this._url.port === null) {\n       return \"\";\n     }\n\n     return usm.serializeInteger(this._url.port);\n   }\n\n   set port(v) {\n     if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n       return;\n     }\n\n     if (v === \"\") {\n       this._url.port = null;\n     } else {\n       usm.basicURLParse(v, { url: this._url, stateOverride: \"port\" });\n     }\n   }\n\n   get pathname() {\n     if (this._url.cannotBeABaseURL) {\n       return this._url.path[0];\n     }\n\n     if (this._url.path.length === 0) {\n       return \"\";\n     }\n\n     return \"/\" + this._url.path.join(\"/\");\n   }\n\n   set pathname(v) {\n     if (this._url.cannotBeABaseURL) {\n       return;\n     }\n\n     this._url.path = [];\n     usm.basicURLParse(v, { url: this._url, stateOverride: \"path start\" });\n   }\n\n   get search() {\n     if (this._url.query === null || this._url.query === \"\") {\n       return \"\";\n     }\n\n     return \"?\" + this._url.query;\n   }\n\n   set search(v) {\n     // TODO: query stuff\n\n     const url = this._url;\n\n     if (v === \"\") {\n       url.query = null;\n       return;\n     }\n\n     const input = v[0] === \"?\" ? v.substring(1) : v;\n     url.query = \"\";\n     usm.basicURLParse(input, { url, stateOverride: \"query\" });\n   }\n\n   get hash() {\n     if (this._url.fragment === null || this._url.fragment === \"\") {\n       return \"\";\n     }\n\n     return \"#\" + this._url.fragment;\n   }\n\n   set hash(v) {\n     if (v === \"\") {\n       this._url.fragment = null;\n       return;\n     }\n\n     const input = v[0] === \"#\" ? v.substring(1) : v;\n     this._url.fragment = \"\";\n     usm.basicURLParse(input, { url: this._url, stateOverride: \"fragment\" });\n   }\n\n   toJSON() {\n     return this.href;\n   }\n };\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n_implementation = module.exports.implementation;\n\n}, () => ({\n  './url-state-machine': _req,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}