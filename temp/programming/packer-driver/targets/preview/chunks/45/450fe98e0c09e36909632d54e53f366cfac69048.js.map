{"version":3,"sources":["file:///C:/Users/Admin/OneDrive/Desktop/dragonfix/assets/Scripts/NetworkConnect.ts"],"names":["_decorator","Component","instantiate","Label","Node","Prefab","Sprite","SpriteFrame","tween","Vec3","Animation","Colyseus","AudioController","Chip","ccclass","property","NetworkConnect","type","String","Number","Boolean","parentNodeChip","client","room","gameState","resultDragon","resultTiger","TotalUser","UserBet","NotmeBet","winner","currentHost","balanceUser","TotalBalanceUser","betDragon","betTiger","betTie","totaluserBetDragon","totaluserBetTiger","totaluserBetTie","dragonReuslt","tigerResult","namePlayer","winnerPLayer","start","Client","useSSL","hostname","port","connect","auth","token","localStorage","getItem","console","log","rooms","getAvailableRooms","length","create","sessionId","joinById","roomId","users","onMessage","message","TimerDown","string","onAudio","PayoutAnim","winAnimPlus","usercancel","state","players","get","playerId","displayName","i","ListLabel","node","removeAllChildren","ListLabelR","betAmount","playerID","betType","createSpriteNode","balance","setInterval","send","onStateChange","roundState","totalBetDragon","totalBetTiger","totalBetTie","totalUserBetDragon","totalUserBetTiger","totalUserBetTie","currentHostId","values","updatePlayerList","onLeave","code","e","error","playerList","displayIndex","displayIndexR","list","list2","ListL","forEach","active","ListR","value","key","nameUser","isHost","warn","previousHostIndex","findIndex","label","previousHost","splice","push","nameUser2","prefab","prefabs","spriteNode","scale","v3","PosTarget","DragonNode","ChipParent","TigerNode","TieNode","addChild","inverseTransformPoint","worldPosition","to","position","winnerList","winnerNode","findWinnerNode","PayUser","createSpriteNodePay","x","y","PayUserSprite","winid","CoinWinAni","price","toString","getComponent","play","winnerName","posX","posY","spriteFrames","spriteComponent","addComponent","spriteFrame","delay","call"],"mappings":"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","sourcesContent":["import {\r\n  _decorator,\r\n  Component,\r\n  instantiate,\r\n  Label,\r\n  Node,\r\n  Prefab,\r\n  Sprite,\r\n  SpriteFrame,\r\n  tween,\r\n  Vec3,\r\n  Animation,\r\n} from \"cc\";\r\n\r\nconst { ccclass, property } = _decorator;\r\nimport Colyseus from \"db://colyseus-sdk/colyseus.js\";\r\nimport { AudioController } from \"./AudioController\";\r\nimport { Chip } from \"./Chip\";\r\n@ccclass(\"NetworkConnect\")\r\nexport class NetworkConnect extends Component {\r\n  @property({ type: String })\r\n  hostname = \"localhost\";\r\n\r\n  @property({ type: Number })\r\n  port = 80;\r\n\r\n  @property({ type: Boolean })\r\n  useSSL = true;\r\n\r\n  @property({ type: Node })\r\n  private ListL: Node[] = [];\r\n\r\n  @property({ type: Node })\r\n  private ListR: Node[] = [];\r\n\r\n  @property({ type: Label })\r\n  public ListLabel: Label[] = [];\r\n\r\n  @property({ type: Label })\r\n  public ListLabelR: Label[] = [];\r\n\r\n  @property(Label)\r\n  private TimerDown: Label;\r\n\r\n  @property(Label)\r\n  private CoinWinAni: Label;\r\n\r\n  @property({\r\n    type: Chip,\r\n  })\r\n  private chipNode: Chip;\r\n\r\n  @property({\r\n    type: Prefab,\r\n  })\r\n  private prfab: Prefab;\r\n\r\n  @property({\r\n    type: Node,\r\n  })\r\n  private DragonNode: Node;\r\n\r\n  @property({\r\n    type: Node,\r\n  })\r\n  private TigerNode: Node;\r\n\r\n  @property({\r\n    type: Node,\r\n  })\r\n  private TieNode: Node;\r\n\r\n  @property({\r\n    type: Node,\r\n  })\r\n  private PayUser: Node;\r\n\r\n  @property({ type: Node })\r\n  private ChipParent: Node[] = [];\r\n\r\n  @property({ type: Prefab })\r\n  public prefabs: Prefab[] = [];\r\n\r\n  parentNodeChip;\r\n\r\n  client!: Colyseus.Client;\r\n  room!: Colyseus.Room;\r\n  gameState;\r\n  resultDragon: number = 0;\r\n  resultTiger: number = 0;\r\n  TotalUser;\r\n  UserBet;\r\n  NotmeBet;\r\n  // result;\r\n  winner;\r\n  currentHost: any;\r\n  balanceUser: any;\r\n  TotalBalanceUser: any;\r\n  betDragon: any;\r\n  betTiger: any;\r\n  betTie: any;\r\n  totaluserBetDragon: any;\r\n  totaluserBetTiger: any;\r\n  totaluserBetTie: any;\r\n  dragonReuslt;\r\n  tigerResult;\r\n  namePlayer;\r\n  winnerPLayer;\r\n  @property({\r\n    type: AudioController,\r\n  })\r\n  private AudioController: AudioController;\r\n\r\n  @property({\r\n    type: SpriteFrame,\r\n  })\r\n  private PayUserSprite: SpriteFrame[] = [];\r\n\r\n  async start() {\r\n    this.client = new Colyseus.Client(\r\n      `${this.useSSL ? \"wss\" : \"ws\"}://${this.hostname}:${this.port}`\r\n    );\r\n\r\n    this.connect();\r\n  }\r\n\r\n  async connect() {\r\n    try {\r\n      this.client.auth.token = localStorage.getItem(\"Token\");\r\n      console.log(this.client.auth.token);\r\n\r\n      // this.room = await this.client.joinOrCreate(\"room1\");\r\n      const rooms = await this.client.getAvailableRooms(\"room1\");\r\n      if (rooms.length === 0) {\r\n        this.room = await this.client.create(\"room1\");\r\n        console.log(\"Created new room with sessionId:\", this.room.sessionId);\r\n      } else {\r\n        // Nếu có phòng có sẵn, tham gia vào phòng đầu tiên trong danh sách\r\n        this.room = await this.client.joinById(rooms[0].roomId);\r\n        console.log(\r\n          \"Joined existing room with sessionId:\",\r\n          this.room.sessionId\r\n        );\r\n      }\r\n      const users = {};\r\n\r\n      // Sự kiện được kích hoạt khi một người dùng tham gia vào phòng\r\n      console.log(\"Joined successfully!\");\r\n      console.log(\"User's sessionId:\", this.room.sessionId);\r\n\r\n      this.room.onMessage(\"timer\", (message) => {\r\n        this.TimerDown.string = message;\r\n        if (message < 30 && message > 0) {\r\n          this.AudioController.onAudio(3);\r\n        }\r\n        if (message === 0) {\r\n          this.AudioController.onAudio(4);\r\n        }\r\n      });\r\n\r\n      this.room.onMessage(\"winnerList\", (message) => {\r\n        this.PayoutAnim(message);\r\n        this.winAnimPlus(message);\r\n      });\r\n\r\n      this.room.onMessage(\"userCancel\", (message) => {\r\n        const usercancel = this.room.state.players.get(\r\n          message.playerId\r\n        ).displayName;\r\n        for (let i = 0; i < this.ListLabel.length; i++) {\r\n          if (usercancel === this.ListLabel[i].string) {\r\n            this.ListLabel[i].node.removeAllChildren();\r\n          }\r\n        }\r\n        for (let i = 0; i < this.ListLabelR.length; i++) {\r\n          if (usercancel === this.ListLabelR[i].string) {\r\n            this.ListLabelR[i].node.removeAllChildren();\r\n          }\r\n        }\r\n      });\r\n\r\n      // this.room.onMessage(\"result\", (message) => {\r\n      //   // console.log(message.result);\r\n      //   this.dragonReuslt = message.dragonCard.value;\r\n      //   this.tigerResult = message.tigerCard.value;\r\n      //   console.log(\"Roong\", this.dragonReuslt);\r\n      //   console.log(\"HO\", this.tigerResult);\r\n\r\n      //   this.result = message.result;\r\n      // });\r\n\r\n      this.room.onMessage(\"userBet\", (message) => {\r\n        console.log(message.betAmount);\r\n\r\n        this.namePlayer = this.room.state.players.get(message.playerID);\r\n        if (message.playerID != this.room.sessionId) {\r\n          this.UserBet = message.betType;\r\n          this.createSpriteNode(this.namePlayer.displayName, message.betAmount);\r\n        } else {\r\n          // console.log(\"false\");\r\n        }\r\n      });\r\n\r\n      this.room.onMessage(\"balance\", (message) => {\r\n        this.balanceUser = message.balance;\r\n        console.log(message);\r\n      });\r\n      setInterval(() => {\r\n        this.room.send(\"getBalance\");\r\n      }, 500);\r\n\r\n      this.room.onStateChange((state) => {\r\n        console.log(\"Room state changed:\", state);\r\n        console.log(\"onStateChange: \", state);\r\n        console.log(state.roundState);\r\n\r\n        this.betDragon = state.totalBetDragon;\r\n        this.betTiger = state.totalBetTiger;\r\n        this.betTie = state.totalBetTie;\r\n        this.totaluserBetDragon = state.totalUserBetDragon;\r\n        this.totaluserBetTiger = state.totalUserBetTiger;\r\n        this.totaluserBetTie = state.totalUserBetTie;\r\n\r\n        // console.log(this.room.state);\r\n        this.currentHost = state.currentHostId;\r\n        const players = [...state.players.values()];\r\n        console.log(\"player List:........\", players);\r\n\r\n        this.updatePlayerList(players);\r\n        // console.log(\"PlayerStatus\", players[0].isHost);\r\n        this.TotalUser = players.length;\r\n        this.gameState = state.roundState;\r\n      });\r\n\r\n      this.room.onLeave((code) => {\r\n        console.log(\"Left room with code:\", code);\r\n      });\r\n    } catch (e) {\r\n      console.error(\"Error:\", e);\r\n    }\r\n  }\r\n\r\n  // updatePlayerList(playerList: any[]) {\r\n  //   let displayIndex = 0;\r\n\r\n  //   [\r\n  //     {\r\n  //       0: [{}],\r\n  //     },\r\n  //   ];\r\n\r\n  //   // // Lấy từng giá trị value từ\r\n  //   const list = playerList[0];\r\n  //   console.log(\"Listtttttt:\", list);\r\n\r\n  //   const numElements = list.length;\r\n\r\n  //   this.ListL.forEach((node) => {\r\n  //     node.active = false;\r\n  //   });\r\n\r\n  //   list.forEach((value: any, key: any) => {\r\n  //     if (\r\n  //       value.sessionId !== this.room.sessionId &&\r\n  //       value.sessionId !== this.currentHost\r\n  //     ) {\r\n  //       const nameUser = value.displayName;\r\n  //       console.log(\"Hostttttttttttt:\", value.isHost);\r\n\r\n  //       if (nameUser) {\r\n  //         // Check if nameUser is defined\r\n  //         this.ListLabel[displayIndex].string = nameUser;\r\n  //         this.ListL[displayIndex].active = true;\r\n  //         displayIndex++;\r\n  //         this.AudioController.onAudio(9);\r\n  //       } else {\r\n  //         console.warn(\r\n  //           `Player with sessionId ${value.sessionId} not found in room state.`\r\n  //         );\r\n  //       }\r\n  //     }\r\n  //   });\r\n  //   for (let i = displayIndex; i < this.ListL.length; i++) {\r\n  //     this.ListL[i].active = false;\r\n  //   }\r\n  // }\r\n\r\n  updatePlayerList(playerList: any[]) {\r\n    let displayIndex = 0;\r\n    let displayIndexR = 0;\r\n    [\r\n      {\r\n        0: [{}],\r\n      },\r\n    ];\r\n    // // Lấy từng giá trị value từ\r\n    const list = playerList[0];\r\n    const list2 = playerList[0];\r\n    console.log(\"Listtttttt:\", list);\r\n    this.ListL.forEach((node) => {\r\n      node.active = false;\r\n    });\r\n\r\n    this.ListR.forEach((node) => {\r\n      node.active = false;\r\n    });\r\n\r\n    list.forEach((value: any, key: any) => {\r\n      if (\r\n        value.sessionId !== this.room.sessionId &&\r\n        value.sessionId !== this.currentHost\r\n      ) {\r\n        const nameUser = value.displayName;\r\n        if (nameUser && value.isHost === false) {\r\n          // Check if nameUser is defined\r\n          this.ListLabel[displayIndex].string = nameUser;\r\n          this.ListL[displayIndex].active = true;\r\n          displayIndex++;\r\n          this.AudioController.onAudio(9);\r\n        } else {\r\n          console.warn(\r\n            `Player with sessionId ${value.sessionId} not found in room state.`\r\n          );\r\n        }\r\n      }\r\n      let previousHostIndex = this.ListLabelR.findIndex(label => label.string === this.currentHost);\r\n\r\nif (previousHostIndex !== -1 && value.sessionId !== this.currentHost) {\r\n  // Đưa phần tử trước đó là currentHost xuống cuối mảng\r\n  let previousHost = this.ListLabelR.splice(previousHostIndex, 1)[0];\r\n  this.ListLabelR.push(previousHost);\r\n\r\n  // Cập nhật trạng thái của phần tử này\r\n  this.ListR[previousHostIndex].active = false;\r\n  this.ListR.push(this.ListR.splice(previousHostIndex, 1)[0]);\r\n\r\n  // Điều chỉnh displayIndexR nếu cần thiết\r\n  displayIndexR--;\r\n}\r\n      if (value.isHost === true && value.sessionId !== this.currentHost) {\r\n        const nameUser2 = value.displayName;\r\n        if (nameUser2 && value.isHost === true) {\r\n          this.ListLabelR[displayIndexR].string = nameUser2;\r\n          this.ListR[displayIndexR].active = true;\r\n          displayIndexR++;\r\n          this.AudioController.onAudio(9);\r\n        } else {\r\n          console.warn(\r\n            `Player with sessionId ${value.sessionId} not found in room state.`\r\n          );\r\n        }\r\n      }\r\n    });\r\n\r\n    // list2.forEach((value: any, key: any) => {\r\n\r\n    // });\r\n    for (let i = displayIndex; i < this.ListL.length; i++) {\r\n      this.ListL[i].active = false;\r\n    }\r\n\r\n    for (let i = displayIndexR; i < this.ListR.length; i++) {\r\n      this.ListR[i].active = false;\r\n    }\r\n  }\r\n\r\n  private createSpriteNode(sessionId: string, betAmount: number) {\r\n    if (betAmount < 1 || betAmount > 6) {\r\n      console.error(\"Invalid betAmount:\", betAmount);\r\n      return;\r\n    }\r\n\r\n    // Lấy prefab tương ứng với betAmount\r\n    const prefab = this.prefabs[betAmount - 1];\r\n    const spriteNode = instantiate(prefab);\r\n    spriteNode.scale = new Vec3(0.5, 0.5);\r\n    let v3 = new Vec3();\r\n    let PosTarget;\r\n\r\n    // Kiểm tra nếu sessionId trùng khớp với label nào đó\r\n    for (let i = 0; i < this.ListLabel.length; i++) {\r\n      if (sessionId === this.ListLabel[i].string) {\r\n        // Thêm node mới làm con của node có label tương ứng\r\n        if (this.UserBet === \"Dragon\") {\r\n          PosTarget = this.DragonNode;\r\n          this.parentNodeChip = this.ChipParent[0];\r\n        } else if (this.UserBet === \"Tiger\") {\r\n          PosTarget = this.TigerNode;\r\n          this.parentNodeChip = this.ChipParent[1];\r\n        } else {\r\n          PosTarget = this.TieNode;\r\n          this.parentNodeChip = this.ChipParent[2];\r\n        }\r\n        this.ListLabel[i].node.addChild(spriteNode);\r\n        this.ListLabel[i].node.inverseTransformPoint(\r\n          v3,\r\n          PosTarget.worldPosition\r\n        );\r\n        tween(spriteNode).to(0.3, { position: v3 }).start();\r\n        break;\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < this.ListLabelR.length; i++) {\r\n      if (sessionId === this.ListLabelR[i].string) {\r\n        // Thêm node mới làm con của node có label tương ứng\r\n        if (this.UserBet === \"Dragon\") {\r\n          PosTarget = this.DragonNode;\r\n          this.parentNodeChip = this.ChipParent[0];\r\n        } else if (this.UserBet === \"Tiger\") {\r\n          PosTarget = this.TigerNode;\r\n          this.parentNodeChip = this.ChipParent[1];\r\n        } else {\r\n          PosTarget = this.TieNode;\r\n          this.parentNodeChip = this.ChipParent[2];\r\n        }\r\n        this.ListLabelR[i].node.addChild(spriteNode);\r\n        this.ListLabelR[i].node.inverseTransformPoint(\r\n          v3,\r\n          PosTarget.worldPosition\r\n        );\r\n        tween(spriteNode).to(0.3, { position: v3 }).start();\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  private PayoutAnim(winnerList) {\r\n    if (winnerList.length > 0) {\r\n      this.AudioController.onAudio(6);\r\n    }\r\n\r\n    // Lặp qua danh sách người chiến thắng và tạo nút trả tiền cho mỗi người chiến thắng\r\n    for (let i = 0; i < winnerList.length; i++) {\r\n      const winner = this.room.state.players.get(\r\n        winnerList[i].sessionId\r\n      ).displayName;\r\n\r\n      // Tìm node tương ứng với người chiến thắng\r\n      const winnerNode = this.findWinnerNode(winner);\r\n\r\n      if (winnerNode) {\r\n        let v3 = new Vec3();\r\n        this.PayUser.inverseTransformPoint(v3, winnerNode.worldPosition);\r\n        // Tạo nút trả tiền cho người chiến thắng\r\n        this.createSpriteNodePay(v3.x, v3.y, this.PayUserSprite);\r\n      }\r\n    }\r\n  }\r\n  private winAnimPlus(winid) {\r\n    for (let i = 0; i < winid.length; i++) {\r\n      if (winid[i].sessionId === this.room.sessionId) {\r\n        this.CoinWinAni.string = \"+\" + winid[i].price.toString();\r\n        this.CoinWinAni.node.active = true;\r\n        this.CoinWinAni.node.getComponent(Animation).play();\r\n        break; // Nếu tìm thấy phần tử thỏa mãn, dừng vòng lặp\r\n      }\r\n    }\r\n  }\r\n\r\n  // Hàm để tìm node tương ứng với người chiến thắng\r\n  private findWinnerNode(winnerName) {\r\n    // Lặp qua danh sách nhãn để tìm node có tên trùng khớp với người chiến thắng\r\n    for (let i = 0; i < this.ListLabel.length; i++) {\r\n      if (winnerName === this.ListLabel[i].string) {\r\n        return this.ListLabel[i].node;\r\n      }\r\n    }\r\n    return null; // Trả về null nếu không tìm thấy node\r\n  }\r\n\r\n  createSpriteNodePay(posX, posY, spriteFrames: SpriteFrame[]) {\r\n    // Lặp qua từng sprite frame để tạo node tương ứng\r\n    for (let i = 0; i < spriteFrames.length; i++) {\r\n      // Tạo một Node mới\r\n      const spriteNode = new Node(\"SpriteNode\");\r\n      spriteNode.scale = new Vec3(0.5, 0.5);\r\n\r\n      // Thêm một component Sprite vào Node\r\n      const spriteComponent = spriteNode.addComponent(Sprite);\r\n\r\n      // Gán SpriteFrame cho component Sprite dựa trên index\r\n      spriteComponent.spriteFrame = spriteFrames[i];\r\n\r\n      // Thêm Node vào Scene hiện tại (ví dụ: Node cha của tất cả Sprite)\r\n      this.PayUser.addChild(spriteNode); // Giả sử winner.node là node của người chiến thắng\r\n\r\n      // Tween Node đến vị trí mong muốn\r\n      tween(spriteNode)\r\n        .delay(i * 0.1) // thiết lập thời gian trễ dựa trên index của node\r\n        .to(1, { position: new Vec3(posX, posY) })\r\n        .call(() => {\r\n          spriteNode.active = false;\r\n        })\r\n        .start();\r\n    }\r\n  }\r\n}\r\n"]}